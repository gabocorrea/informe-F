FALTA:
	2 - correcciones de romain (3 horas)
	5 - Resumen (1.5 horas)
	6 - Bibliografía (2 horas)
	7 - Conclusiones y Glosario (2 horas)
	8 - Anexo (2 horas)
	9 - Imprimir y anillar (2 horas)
	10 - Revisar errores (1.5 hora)
	---- total hasta aca: 25 horas (+4h)
	11 - Diagrama para los casos de uso (1h)
			TODOS:
				1 - Revisar numeracion automatica de las tablas e imagenes


TODO:
	en 3.1, escribi un caso de uso donde se puede exportar de la web a Documentacion API corregida que destaca directivas.
			...pero esto no está implementado ni mencionado en otra parte del informe. Mencionar el diseño optimo en otra parte
			del informe.



150Largo,46Ancho,182Alto (cm)
155+20(g.comunes)+30(deuda)+30(cuentas)=235

todo's:
	add min num lines in comment to consider it .. to 1_...py script   (que sea 4 o mas lineas)
*	fix bug escribir id en index.html
*	fix problema <li>,<ol>,<ul>,</li>, ...etc al separar por frases usando el script.
*	linea 554:	tiene mal extraido el texto del comentario... está incompleto ...-> entonces -> dataset.xml no fue correctamente convertido a .csv    ...      linea 11980 ? quizas tambien le pasa lo mismo.... porque tambien su primer valor era un comentario en las comas.
*	(opcional)	fix bug,que los hotkeys no funcionen al estar escribiendo.
	(GUI)		en index.html hacer que la URL esté con left-justification (actualmente está en el centro y se ve mal). además hacer que no se vea  el #1 o #°n  al final de la URL
	




_________________________________
PARTES PENDIENTES DEL DESARROLLO
----
1)	Extraer comentarios
	1.2)*	(asignar cada comentario a su archivo,clase,posicion dentro de archivo, etc)
2)	Revision Manual en pagina web
	2.?)*	Elección de tipos o clases de comentarios (ej. directive, non-directive, null-directive)










IDs:
Eclipse JFace: 		87 - 7319
Apache Commons:   	7324 - 10404
Java:				10405 - 20575    



en el informe hablar de:
	PREP DE DATOS:

	WEB:
			pagina web index.html       usó jquery-2.1.3.js y keypress.js y bootstrap    recibe un .csv y permite visualizar los comentarios.. con las frases destacadas con colores si es directiva o de otro tipo (mas tipos fueron agregados posteriormente). uso de hotkeys fue importante para facilitar el proceso un poco tedioso de navegar por varios cientos de comentarios y marcar o desmarcar con colores algunas frases.   Pagina creada para visualizar y para corregir los tipos/clases de las frases. Exporta datos en forma de texto , inicialmente procesados a mano por un script... pero automatizado posteriormente. La solucion es Web porque es mas compatible que otras soluciones.

			hablar algo de script que procesa output de la web 3_process_web_output.py

			Hablar de los intentos realizados para mejorar la visualización de las frases destacadas en la pagina web. Se intentó removiendo las comillas "" y todos los tags html (usando regexp). Luego se sacaron los tags <p> <li>


	software final:
			explicar extraccion de comentarios de varios archivos en varias carpetas.
			... etc (pendiente)...



Bibliografia:
	

	Incluir , para el uso practico de liblinear: (Appendix N) http://www.csie.ntu.edu.tw/~cjlin/papers/liblinear.pdf






Comment Classifier
Comments Highlighter (CHI o CHi)
Jah Api Highlighter (JAH)
Java Api Highlighter (JAH)



2648-2 tiene un typpo.. corregir antes de pasar a weka!
3511-2 y 3556-2 tiene un typpo.. corregir antes de pasar a weka! 
3167-3 es un ejemplo de semi-directive (es un consejo)

mejoras			q en el fut   la app lea javadoc en vez de html para mostrar los @link
mejora 			q el usuario pueda costumizar sus keywords
hablar de que se intento mantener consistencia al marcar frases... tratando de no hacer ejemplos contradictorios... quizas poner un ejemplo de
		algunas consistencias q teniamos en mente con null o deprecated